{
  "scenarioTemplate": {
    "name": "Автоматическое управление бризером Tion по уровню CO2",
    "desc": "Настраивает скорость вентилятора бризера Tion на основе показаний датчика CO2",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = [];\n\ninfo = {\n    name: \"Автоматическое управление бризером Tion по уровню CO2\",\n    description: \"Настраивает скорость вентилятора бризера Tion на основе показаний датчика CO2\",\n    version: \"2.0\",\n    author: \"xor777\",\n    onStart: true,\n\n    sourceServices: [HS.Thermostat],\n    sourceCharacteristics: [HC.C_FanSpeed],\n\n    options: {\n        co2sensor: {\n            name: {\n                en: \"CO2 sensor\",\n                ru: \"Датчик CO2\"\n            },\n            desc: {\n                en: \"Select CO2 sensor\",\n                ru: \"Выберите датчик CO2\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        lowCO2: {\n            name: {\n                en: \"Low CO2 threshold (ppm)\",\n                ru: \"Низкий порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 700,\n            desc: {\n                en: \"Below this level - ventilation speed 1\",\n                ru: \"Ниже этого уровня - скорость вентиляции 1\"\n            }\n        },\n        mediumCO2: {\n            name: {\n                en: \"Medium CO2 threshold (ppm)\",\n                ru: \"Средний порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 950,\n            desc: {\n                en: \"Between low and medium - ventilation speed 2\",\n                ru: \"Между низким и средним - скорость вентиляции 2\"\n            }\n        },\n        highCO2: {\n            name: {\n                en: \"High CO2 threshold (ppm)\",\n                ru: \"Высокий порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 1200,\n            desc: {\n                en: \"Between medium and high - ventilation speed 3\",\n                ru: \"Между средним и высоким - скорость вентиляции 3\"\n            }\n        },\n        turboThreshold: {\n            name: {\n                en: \"CO2 level for maximum ventilation (ppm)\",\n                ru: \"Уровень CO2 для максимальной вентиляции (ppm)\"\n            },\n            type: \"Integer\",\n            value: 1500,\n            desc: {\n                en: \"Above this level - maximum speed 5\",\n                ru: \"Выше этого уровня - максимальная скорость 5\"\n            }\n        }\n    },\n\n    variables: {\n        lastCO2: undefined,\n        lastFanSpeed: undefined,\n        lastUpdateTime: undefined,\n        subscribed: false,\n        subscribe: undefined\n    }\n}\n\nlet debug = false\n\nfunction trigger(source, value, variables, options, context) {\n    try {\n        let acc = source.getAccessory()\n        let model = acc.getModel ? acc.getModel() : null\n\n        if (model != \"Tion\") {\n            logError(\"Поддерживаются только бризеры Tion\", source)\n            return\n        }\n        \n        if (options.co2sensor === \"\") {\n            logError(\"Выберите датчик CO2. Если уже выбрали - активируйте сценарий заново\", source)\n            return\n        }\n        \n        let thermostatService = null\n        acc.getServices().forEach(function (service) {\n            if (service.getType() == HS.Thermostat) {\n                thermostatService = service\n            }\n        })\n\n        if (!thermostatService) {\n            logError(\"Не обнаружен сервис термостата\", source)\n            return\n        }\n\n        let fanSpeedChar = thermostatService.getCharacteristic(HC.C_FanSpeed)\n        if (!fanSpeedChar) {\n            logError(\"Не обнаружена характеристика скорости вентилятора\", source)\n            return\n        }\n\n        setSpeedFromCO2Sensor(source, variables, options, fanSpeedChar)\n\n        if (!variables.subscribe || variables.subscribed != true) {\n            showSubscribeMessage(options.co2sensor)\n            let subscribe = Hub.subscribeWithCondition(\"\", \"\", [HS.CarbonDioxideSensor, HS.AirQualitySensor], [HC.CarbonDioxideLevel], function (sensorSource, sensorValue) {\n                let service = sensorSource.getService()\n                let isSelected = service.getUUID() == options.co2sensor\n                if (isSelected && fanSpeedChar) {\n                    updateFanSpeed(sensorValue, options, fanSpeedChar, variables, source)\n                }\n            }, acc)\n            variables.subscribe = subscribe\n            variables.subscribed = true\n        }\n    } catch (e) {\n        logError(`Ошибка настройки автоматического режима: ${e.toString()}`, source)\n    }\n}\n\nfunction updateFanSpeed(co2Value, options, fanSpeedChar, variables, source) {\n    let fanSpeed\n    \n    if (co2Value < options.lowCO2) {\n        fanSpeed = 1 // QUIET\n    } else if (co2Value < options.mediumCO2) {\n        fanSpeed = 2 // LOW\n    } else if (co2Value < options.highCO2) {\n        fanSpeed = 3 // MEDIUM\n    } else if (co2Value < options.turboThreshold) {\n        fanSpeed = 4 // HIGH\n    } else {\n        fanSpeed = 5 // TURBO\n    }\n    \n    if (variables.lastFanSpeed != fanSpeed) {\n        fanSpeedChar.setValue(fanSpeed)\n        logInfo(`Установлена скорость вентилятора: ${fanSpeed} (CO2: ${co2Value} ppm)`, source, debug)\n        variables.lastFanSpeed = fanSpeed\n        variables.lastCO2 = co2Value\n        variables.lastUpdateTime = Date.now()\n    }\n}\n\nfunction setSpeedFromCO2Sensor(source, variables, options, fanSpeedChar) {\n    try {\n        const cdata = options.co2sensor.split('.')\n        const aid = cdata[0]\n        const sid = cdata[1]\n        let sensorAccessory = Hub.getAccessory(aid)\n        \n        if (!sensorAccessory) {\n            logError(`Не найден датчик CO2. ID: ${options.co2sensor}`, source)\n            return\n        }\n        \n        let sensorService = sensorAccessory.getService(sid)\n        if (sensorService) {\n            const status = sensorAccessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue() == true\n            if (!status) {\n                logWarn(`Датчик ${getDeviceName(sensorService)} не в сети`, source)\n                return\n            }\n            \n            let co2Value\n            try {\n                co2Value = sensorService.getCharacteristic(HC.CarbonDioxideLevel).getValue()\n            } catch (e) {\n                logError(`Не удалось получить показания CO2: ${e.toString()}`, source)\n                return\n            }\n            \n            updateFanSpeed(co2Value, options, fanSpeedChar, variables, source)\n        } else {\n            logError(`Не найден датчик CO2. ID: ${options.co2sensor}`, source)\n            return\n        }\n\n        const currentTime = Date.now()\n        if (variables.lastUpdateTime && (currentTime - variables.lastUpdateTime > oneDayMs)) {\n            logWarn(`Нет показаний от датчика CO2 (${getDeviceName(sensorService)}) в течении суток или более`, source)\n        }\n    } catch (e) {\n        logError(`Не удалось получить показания с датчика ${options.co2sensor}: ${e.toString()}`, source)\n    }\n}\n\nfunction showSubscribeMessage(sensor) {\n    try {\n        const cdata = sensor.split('.')\n        const aid = cdata[0]\n        const sid = cdata[1]\n        const acc = Hub.getAccessory(aid)\n        const service = acc.getService(sid)\n        const accName = service.getAccessory().getName()\n        const sName = service.getName()\n\n        console.info(`Подключен датчик CO2: ${(accName == sName ? accName : accName + \" \" + sName)}`)\n    } catch (e) {\n        console.error(`Ошибка при отображении сообщения о подключении: ${e.toString()}`)\n    }\n}\n\nfunction getDeviceName(service) {\n    try {\n        const acc = service.getAccessory()\n        const room = acc.getRoom().getName()\n        const accName = service.getAccessory().getName()\n        const sName = service.getName()\n        const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". Скрыт\" : \"\")\n        return name\n    } catch (e) {\n        return \"Неизвестное устройство\"\n    }\n}\n\nfunction logInfo(text, source, show) {\n    if (show) console.info(getLogText(text, source))\n}\n\nfunction logWarn(text, source) {\n    console.warn(getLogText(text, source))\n}\n\nfunction logError(text, source) {\n    console.error(getLogText(text, source))\n}\n\nfunction getLogText(text, source) {\n    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`\n}\n\nlet servicesListUnsort = []\nHub.getAccessories().forEach(function (a) {\n    a.getServices().filter(function (s) { \n        return s.getType() == HS.CarbonDioxideSensor || s.getType() == HS.AirQualitySensor \n    }).forEach(function (s) {\n        try {\n            const c = s.getCharacteristic(HC.CarbonDioxideLevel)\n            if (!c) return\n            let displayname = getDeviceName(s)\n            servicesListUnsort.push({\n                name: { ru: displayname, en: displayname },\n                value: s.getUUID()\n            })\n        } catch (e) {\n            console.warn(`Ошибка при добавлении датчика в список: ${e.toString()}`)\n        }\n    })\n})\n\nservicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\" }, value: '' })\nservicesListUnsort.sort(function (a, b) { return a.name.ru.localeCompare(b.name.ru) }).forEach(function (s) { servicesList.push(s) })\n\nconst oneDayMs = 24 * 60 * 60 * 1000\nconst DEBUG_TITLE = \"АвтоТион: \" ",
    "type": "LOGIC"
  }
}