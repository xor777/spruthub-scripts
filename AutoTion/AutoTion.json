{
  "scenarioTemplate": {
    "name": "Автоматическое управление бризером Tion по уровню CO2",
    "desc": "Настраивает скорость вентилятора бризера Tion на основе показаний датчика CO2",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = [];\n\ninfo = {\n    name: \"Автоматическое управление бризером Tion по уровню CO2\",\n    description: \"Настраивает скорость вентилятора бризера Tion на основе показаний датчика CO2\",\n    version: \"3.0\",\n    author: \"xor777\",\n    onStart: true,\n\n    sourceServices: [HS.Thermostat],\n    sourceCharacteristics: [HC.C_FanSpeed],\n\n    options: {\n        co2sensor: {\n            name: {\n                en: \"CO2 sensor\",\n                ru: \"Датчик CO2\"\n            },\n            desc: {\n                en: \"Select CO2 sensor\",\n                ru: \"Выберите датчик CO2\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        defaultFanSpeed: {\n            name: { ru: \"Скорость по умолчанию\", en: \"Default fan speed\" },\n            type: \"Integer\",\n            value: 1,\n            desc: {\n                ru: \"Используется ТОЛЬКО если датчик CO2 не выбран. 0 – выключить, 1‑5 – скорость\",\n                en: \"Used ONLY when no CO2 sensor is selected. 0 – off, 1‑5 – speed\"\n            }\n        },\n        turnOffAtLowCO2: {\n            name: { ru: \"Выключать бризер при низком CO2\", en: \"Turn off at low CO2\" },\n            type: \"Boolean\",\n            value: false,\n            desc: {\n                ru: \"Работает только при выбранном датчике CO2. Если включено и CO2 ниже нижнего порога, бризер выключается, иначе работает на тихой скорости.\",\n                en: \"Works only when a CO2 sensor is selected. If enabled and CO2 is below the low threshold the fan turns off, otherwise quiet speed.\"\n            }\n        },\n        lowCO2: {\n            name: {\n                en: \"Low CO2 threshold (ppm)\",\n                ru: \"Низкий порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 700,\n            desc: {\n                en: \"Below this level ventilation runs at speed 1 (or turns off if \\\"Turn off at low CO2\\\" is enabled)\",\n                ru: \"Ниже этого уровня бризер работает на скорости 1 (или выключается, если включена опция \\\"Выключать бризер при низком CO2\\\")\"\n            }\n        },\n        mediumCO2: {\n            name: {\n                en: \"Medium CO2 threshold (ppm)\",\n                ru: \"Средний порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 950,\n            desc: {\n                en: \"Between low and medium - ventilation speed 2\",\n                ru: \"Между низким и средним - скорость вентиляции 2\"\n            }\n        },\n        highCO2: {\n            name: {\n                en: \"High CO2 threshold (ppm)\",\n                ru: \"Высокий порог CO2 (ppm)\"\n            },\n            type: \"Integer\",\n            value: 1200,\n            desc: {\n                en: \"Between medium and high - ventilation speed 3\",\n                ru: \"Между средним и высоким - скорость вентиляции 3\"\n            }\n        },\n        turboThreshold: {\n            name: {\n                en: \"CO2 level for maximum ventilation (ppm)\",\n                ru: \"Уровень CO2 для максимальной вентиляции (ppm)\"\n            },\n            type: \"Integer\",\n            value: 1500,\n            desc: {\n                en: \"Above this level - maximum speed 5\",\n                ru: \"Выше этого уровня - максимальная скорость 5\"\n            }\n        },\n        nightLimitEnabled: {\n            name: { ru: \"Ограничивать скорость в ночном режиме\", en: \"Limit speed at night\" },\n            type: \"Boolean\",\n            value: false,\n            desc: { ru: \"Если включено, при ночном режиме сигнализации скорость ограничивается\", en: \"If enabled, limit speed while in night mode\" }\n        },\n        nightMaxSpeed: {\n            name: { ru: \"Макс. скорость в ночном режиме\", en: \"Max speed at night\" },\n            type: \"Integer\",\n            value: 2,\n            desc: { ru: \"0 – выключить, 1-5 – ограничить скорость\", en: \"0 – off, 1-5 – limit speed\" }\n        },\n        stopWhenAway: {\n            name: { ru: \"Ограничивать скорость в режиме 'Нет дома'\", en: \"Limit speed when away\" },\n            type: \"Boolean\",\n            value: false,\n            desc: { ru: \"Если включено, при режиме 'Нет дома' скорость ограничивается\", en: \"If enabled, limit speed while away\" }\n        },\n        awayMaxSpeed: {\n            name: { ru: \"Макс. скорость в режиме 'Нет дома'\", en: \"Max speed when away\" },\n            type: \"Integer\",\n            value: 0,\n            desc: { ru: \"0 – выключить, 1-5 – ограничить скорость\", en: \"0 – off, 1-5 – limit speed\" }\n        },\n        debugEnabled: {\n            name: { ru: \"Включить отладку\", en: \"Enable debug\" },\n            type: \"Boolean\",\n            value: false,\n            desc: { ru: \"Показывать подробные сообщения в логах\", en: \"Show detailed logs\" }\n        }\n    },\n\n    variables: {\n        lastCO2: undefined,\n        lastFanSpeed: undefined,\n        lastUpdateTime: undefined,\n        subscribed: false,\n        subscribe: undefined,\n        securitySubscribed: false,\n        securitySubscribe: undefined,\n        awayActive: false,\n        nightActive: false,\n        cachedThermostatSid: undefined,\n        cachedSecurityServiceSid: undefined,\n        cachedSecurityServiceAid: undefined\n    }\n}\n\n// debug берём из настроек\n\nfunction trigger(source, value, variables, options, context) {\n    try {\n        let acc = source.getAccessory()\n        let model = acc.getModel ? acc.getModel() : null\n\n        if (model != \"Tion\") {\n            logError(\"Поддерживаются только бризеры Tion\", source)\n            return\n        }\n        \n        const sensorSelected = options.co2sensor !== \"\"\n        \n        let thermostatService = null\n        if (variables.cachedThermostatSid) {\n            thermostatService = acc.getService(variables.cachedThermostatSid)\n        }\n        if (!thermostatService) {\n            acc.getServices().forEach(function (service) {\n                if (service.getType() == HS.Thermostat) {\n                    thermostatService = service\n                }\n            })\n            if (thermostatService) {\n                try {\n                    variables.cachedThermostatSid = thermostatService.getUUID()\n                } catch (e) {}\n            }\n        }\n\n        if (!thermostatService) {\n            logError(\"Не обнаружен сервис термостата\", source)\n            return\n        }\n\n        let fanSpeedChar = thermostatService.getCharacteristic(HC.C_FanSpeed)\n        let targetModeChar = thermostatService.getCharacteristic(HC.TargetHeatingCoolingState)\n        let powerCharFallback = targetModeChar ? null : (thermostatService.getCharacteristic(HC.Active) || thermostatService.getCharacteristic(HC.On))\n        if (!fanSpeedChar) {\n            logError(\"Не обнаружена характеристика скорости вентилятора\", source)\n            return\n        }\n\n        if(sensorSelected){\n            setSpeedFromCO2Sensor(source, variables, options, fanSpeedChar, targetModeChar, powerCharFallback)\n        } else {\n            // Работа без датчика: берём скорость из настройки и применяем ограничения\n            let reasons=[\"значение по умолчанию\"]\n            let speed=applySpeedRestrictions(options.defaultFanSpeed,options,variables,reasons)\n            if(options.debugEnabled){\n                logInfo(`Debug: без датчика, скорость=${speed} [${reasons.join(', ')}]`, source, true)\n            }\n            directSetFanSpeed(speed, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source, reasons)\n        }\n\n        // Подписка на сигнализацию\n        if ((options.stopWhenAway || options.nightLimitEnabled) && !variables.securitySubscribed) {\n            let securitySubscribe = Hub.subscribeWithCondition(\"\", \"\", [HS.SecuritySystem], [HC.SecuritySystemCurrentState], function (secSource, secValue) {\n                variables.awayActive = (secValue === 1)\n                variables.nightActive = (secValue === 2)\n                logInfo(`Сигнализация: ${securityStateToString(secValue)}`, secSource, options.debugEnabled)\n                if(options.co2sensor !== \"\"){\n                    updateFanSpeed(variables.lastCO2 !== undefined ? variables.lastCO2 : 0, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source)\n                } else {\n                    let reasons=[\"значение по умолчанию\"]\n                    let speed=applySpeedRestrictions(options.defaultFanSpeed,options,variables,reasons)\n                    directSetFanSpeed(speed, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source, reasons)\n                }\n            })\n            variables.securitySubscribe = securitySubscribe\n            variables.securitySubscribed = true\n            // Инициализация текущего статуса\n            let securityService = undefined\n            if (variables.cachedSecurityServiceAid && variables.cachedSecurityServiceSid) {\n                const a = Hub.getAccessory(variables.cachedSecurityServiceAid)\n                securityService = a ? a.getService(variables.cachedSecurityServiceSid) : undefined\n            }\n            if (!securityService) {\n                Hub.getAccessories().forEach(function (acc) {\n                    if (securityService) return\n                    try {\n                        const srv = acc.getServices().find(function (s) { return s.getType() == HS.SecuritySystem })\n                        if (srv) securityService = srv\n                    } catch (e) {}\n                })\n                if (securityService) {\n                    try {\n                        variables.cachedSecurityServiceAid = securityService.getAccessory().getUUID ? securityService.getAccessory().getUUID() : securityService.getAccessory().aid\n                        variables.cachedSecurityServiceSid = securityService.getUUID()\n                    } catch (e) {}\n                    try {\n                        const curState = securityService.getCharacteristic(HC.SecuritySystemCurrentState).getValue()\n                        variables.awayActive = (curState === 1)\n                        variables.nightActive = (curState === 2)\n                        logInfo(`Текущий режим сигнализации: ${securityStateToString(curState)}`, securityService.getCharacteristic(HC.SecuritySystemCurrentState), options.debugEnabled)\n                    } catch (e) {}\n                }\n            }\n        }\n\n        if (sensorSelected && (!variables.subscribe || variables.subscribed != true)) {\n            showSubscribeMessage(options.co2sensor)\n            let subscribe = Hub.subscribeWithCondition(\"\", \"\", [HS.CarbonDioxideSensor, HS.AirQualitySensor], [HC.CarbonDioxideLevel], function (sensorSource, sensorValue) {\n                let service = sensorSource.getService()\n                let isSelected = service.getUUID() == options.co2sensor\n                if (isSelected && fanSpeedChar) {\n                    updateFanSpeed(sensorValue, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source)\n                }\n            }, acc)\n            variables.subscribe = subscribe\n            variables.subscribed = true\n        }\n\n        // Если датчик был отключён, удаляем прежнюю подписку\n        if(!sensorSelected && variables.subscribe){\n            try{ variables.subscribe() }catch(e){}\n            variables.subscribe = undefined\n            variables.subscribed = false\n            if(options.debugEnabled){\n                logInfo(\"Debug: подписка на датчик CO2 удалена\", source, true)\n            }\n        }\n    } catch (e) {\n        logError(`Ошибка настройки автоматического режима: ${e.toString()}`, source)\n    }\n}\n\nfunction applySpeedRestrictions(speed, options, variables, reasons){\n    const initial=speed\n    if(options.nightLimitEnabled&&variables.nightActive){\n        speed=Math.min(speed,options.nightMaxSpeed)\n        if(speed<initial) reasons.push(\"ограничение ночь\")\n    }\n    if(options.stopWhenAway&&variables.awayActive){\n        speed=Math.min(options.awayMaxSpeed,speed)\n        if(speed<initial) reasons.push(\"ограничение 'Нет дома'\")\n    }\n    return speed\n}\n\nfunction calcFanSpeed(co2Value, options, variables){\n    let speed\n    let reasons=[]\n    if(co2Value<options.lowCO2){\n        speed=options.turnOffAtLowCO2?0:1\n        reasons.push(speed===0?\"низкий CO2 (выкл)\":\"низкий CO2 (скорость 1)\")\n    }else if(co2Value<options.mediumCO2){\n        speed=2\n        reasons.push(\"средний CO2\")\n    }else if(co2Value<options.highCO2){\n        speed=3\n        reasons.push(\"высокий CO2\")\n    }else if(co2Value<options.turboThreshold){\n        speed=4\n        reasons.push(\"очень высокий CO2\")\n    }else{\n        speed=5\n        reasons.push(\"максимальный CO2\")\n    }\n    speed=applySpeedRestrictions(speed,options,variables,reasons)\n    return {speed,reasons}\n}\n\nfunction updateFanSpeed(co2Value, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source) {\n    var calcRes = calcFanSpeed(co2Value, options, variables)\n    var fanSpeed = calcRes.speed\n    var reasons = calcRes.reasons\n    \n    if (fanSpeed === 0) {\n        if (variables.lastFanSpeed !== 0) {\n            if (targetModeChar) targetModeChar.setValue(0)\n            else if (powerCharFallback) powerCharFallback.setValue(0)\n            let txt=`Бризер выключен (CO2: ${co2Value} ppm)`\n            if(reasons.length) txt+=` [${reasons.join(', ')}]`\n            logInfo(txt, source, options.debugEnabled)\n            variables.lastFanSpeed = 0\n            variables.lastCO2 = co2Value\n            variables.lastUpdateTime = Date.now()\n        }\n    } else {\n        if (targetModeChar) {\n            if (targetModeChar.getValue() !== 2) targetModeChar.setValue(2)\n        } else if (powerCharFallback) {\n            if (powerCharFallback.getValue() !== 1) powerCharFallback.setValue(1)\n        }\n        fanSpeedChar.setValue(fanSpeed)\n        let txt=`Установлена скорость вентилятора: ${fanSpeed} (CO2: ${co2Value} ppm)`\n        if(reasons.length>1) txt+=` [${reasons.slice(1).join(', ')}]`\n        logInfo(txt, source, options.debugEnabled)\n        variables.lastFanSpeed = fanSpeed\n        variables.lastCO2 = co2Value\n        variables.lastUpdateTime = Date.now()\n    }\n}\n\nfunction setSpeedFromCO2Sensor(source, variables, options, fanSpeedChar, targetModeChar, powerCharFallback) {\n    try {\n        const cdata = options.co2sensor.split('.')\n        const aid = cdata[0]\n        const sid = cdata[1]\n        let sensorAccessory = Hub.getAccessory(aid)\n        \n        if (!sensorAccessory) {\n            logError(`Не найден датчик CO2. ID: ${options.co2sensor}`, source)\n            return\n        }\n        \n        let sensorService = sensorAccessory.getService(sid)\n        if (sensorService) {\n            const status = sensorAccessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue() == true\n            if (!status) {\n                logWarn(`Датчик ${getDeviceName(sensorService)} не в сети`, source)\n                return\n            }\n            \n            let co2Value\n            try {\n                co2Value = sensorService.getCharacteristic(HC.CarbonDioxideLevel).getValue()\n            } catch (e) {\n                logError(`Не удалось получить показания CO2: ${e.toString()}`, source)\n                return\n            }\n            \n            updateFanSpeed(co2Value, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source)\n        } else {\n            logError(`Не найден датчик CO2. ID: ${options.co2sensor}`, source)\n            return\n        }\n\n        const currentTime = Date.now()\n        if (variables.lastUpdateTime && (currentTime - variables.lastUpdateTime > oneDayMs)) {\n            logWarn(`Нет показаний от датчика CO2 (${getDeviceName(sensorService)}) в течении суток или более`, source)\n        }\n    } catch (e) {\n        logError(`Не удалось получить показания с датчика ${options.co2sensor}: ${e.toString()}`, source)\n    }\n}\n\nfunction showSubscribeMessage(sensor) {\n    try {\n        const cdata = sensor.split('.')\n        const aid = cdata[0]\n        const sid = cdata[1]\n        const acc = Hub.getAccessory(aid)\n        const service = acc.getService(sid)\n        const accName = service.getAccessory().getName()\n        const sName = service.getName()\n\n        console.info(`Подключен датчик CO2: ${(accName == sName ? accName : accName + \" \" + sName)}`)\n    } catch (e) {\n        console.error(`Ошибка при отображении сообщения о подключении: ${e.toString()}`)\n    }\n}\n\nfunction getDeviceName(service) {\n    try {\n        const acc = service.getAccessory()\n        const room = acc.getRoom().getName()\n        const accName = service.getAccessory().getName()\n        const sName = service.getName()\n        const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". Скрыт\" : \"\")\n        return name\n    } catch (e) {\n        return \"Неизвестное устройство\"\n    }\n}\n\nfunction logInfo(text, source, show) {\n    if (show) console.info(getLogText(text, source))\n}\n\nfunction logWarn(text, source) {\n    console.warn(getLogText(text, source))\n}\n\nfunction logError(text, source) {\n    console.error(getLogText(text, source))\n}\n\nfunction getLogText(text, source) {\n    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`\n}\n\nfunction securityStateToString(state) {\n    switch (state) {\n        case 0: return \"Disarmed\";\n        case 1: return \"Away\";\n        case 2: return \"Night\";\n        case 3: return \"Stay\";\n        case 4: return \"Triggered\";\n        default: return `Unknown(${state})`;\n    }\n}\n\nfunction directSetFanSpeed(speed, options, fanSpeedChar, targetModeChar, powerCharFallback, variables, source, reasons){\n    if(speed===0){\n        if(variables.lastFanSpeed!==0){\n            if(targetModeChar) targetModeChar.setValue(0)\n            else if(powerCharFallback) powerCharFallback.setValue(0)\n            let txt = `Бризер выключен`\n            if(reasons.length) txt+=` [${reasons.join(', ')}]`\n            logInfo(txt, source, options.debugEnabled)\n            variables.lastFanSpeed=0\n        }\n        return\n    }\n    if(targetModeChar){\n        if(targetModeChar.getValue()!==2) targetModeChar.setValue(2)\n    } else if(powerCharFallback){\n        if(powerCharFallback.getValue()!==1) powerCharFallback.setValue(1)\n    }\n    fanSpeedChar.setValue(speed)\n    let txt=`Установлена скорость вентилятора: ${speed}`\n    if(reasons.length) txt+=` [${reasons.join(', ')}]`\n    logInfo(txt, source, options.debugEnabled)\n    variables.lastFanSpeed=speed\n}\n\nlet servicesListUnsort = []\nHub.getAccessories().forEach(function (a) {\n    a.getServices().filter(function (s) { \n        return s.getType() == HS.CarbonDioxideSensor || s.getType() == HS.AirQualitySensor \n    }).forEach(function (s) {\n        try {\n            const c = s.getCharacteristic(HC.CarbonDioxideLevel)\n            if (!c) return\n            let displayname = getDeviceName(s)\n            servicesListUnsort.push({\n                name: { ru: displayname, en: displayname },\n                value: s.getUUID()\n            })\n        } catch (e) {\n            console.warn(`Ошибка при добавлении датчика в список: ${e.toString()}`)\n        }\n    })\n})\n\nservicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\" }, value: '' })\nservicesListUnsort.sort(function (a, b) { return a.name.ru.localeCompare(b.name.ru) }).forEach(function (s) { servicesList.push(s) })\n\nconst oneDayMs = 24 * 60 * 60 * 1000\nconst DEBUG_TITLE = \"АвтоТион: \" ",
    "type": "LOGIC"
  }
}